{"version":3,"sources":["utils/constants.js","views/App.js","serviceWorker.js","index.js"],"names":["Petition","axios","create","baseURL","initialState","description","lines","line","sublines","subline","states","stateSelected","reducer","state","action","type","payload","App","useReducer","dispatch","getAllApis","a","get","then","response","data","idlinea","useEffect","className","value","onChange","e","target","placeholder","index","length","element","descr","defaultValue","map","item","key","onClick","sub_line","post","console","log","alert","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a8872718.chunk.js","sourcesContent":["import axios from \"axios\"\n\nconst baseURL = \"http://localhost:8080\"\n\n/**Configuramos axios para enviar datos a una sola url */\nexport const Petition = axios.create({ baseURL })","import React, { useReducer, useEffect } from 'react'\nimport './App.scss'\nimport { Petition } from '../utils/constants'\n\nconst initialState = {\n\tdescription: \"\",\n\n\t// Lines select\n\tlines: [],\n\tline: \"default\",\n\n\t// Sub lines\n\tsublines: [],\n\tsubline: \"defautl\",\n\n\tstates: [],\n\tstateSelected: \"default\"\n}\n\nconst reducer = (state, action) => {\n\treturn {\n\t\t...state,\n\t\t[action.type]: action.payload\n\t}\n}\n\nfunction App() {\n\tconst [state, dispatch] = useReducer(reducer, initialState)\n\n\t/**\n\t * Metodo que el usuario ejecuta cuando envia el formulario\n\t */\n\tconst submit = () => {\n\t\tconst data = {\n\t\t\ttype: \"item\",\n\t\t\tdescription: state.description,\n\t\t\tline: state.line,\n\t\t\tsub_line: state.subline,\n\t\t\tstate: state.stateSelected\n\t\t}\n\n\t\tPetition.post(\"/items/add\", data)\n\t\t.then(response => {\n\t\t\tconst { data } = response\n\n\t\t\tconsole.log(data)\n\n\n\t\t\tdispatch({ type: \"description\", payload: \"\" })\n\n\n\t\t\talert(\"Successfully!\")\n\t\t})\n\t}\n\n\t/**\n\t * Metodo que obitiene la api para infromacion de catalogos\n\t */\n\tconst getAllApis = async () => {\n\t\tawait Petition.get(\"/items/get/data\")\n\t\t\t.then(response => {\n\t\t\t\tconst { data } = response\n\n\t\t\t\tdispatch({ type: \"lines\", payload: data.lines })\n\t\t\t\tdispatch({ type: \"line\", payload: data.lines[0] })\n\n\n\t\t\t\tdispatch({ type: \"sublines\", payload: data.sublines })\n\t\t\t\tdispatch({ type: \"subline\", payload: data.sublines[0].idlinea })\n\n\t\t\t\tdispatch({ type: \"states\", payload: data.states })\n\t\t\t\tdispatch({ type: \"stateSelected\", payload: data.states[0] })\n\t\t\t})\n\t}\n\n\tconst onChangeLine = (e) => {\n\t\tconst { value } = e.target\n\n\t\tdispatch({ type: \"line\", payload: value })\n\n\n\t\tfor (let index = 0; index < state.sublines.length; index++) {\n\t\t\tconst element = state.sublines[index]\n\n\n\t\t\tif (element.descr === value) {\n\t\t\t\tdispatch({ type: \"subline\", payload: element.idlinea })\n\n\t\t\t\tbreak\n\t\t\t}\n\t\t\t\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tgetAllApis()\n\t}, [])\n\n\treturn (\n\t\t<div className=\"app\">\n\t\t\t<fieldset>\n\t\t\t\t<legend>Ingresar item</legend>\n\n\t\t\t\t<div className=\"row\">\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<input\n\t\t\t\t\t\t\tvalue={state.description}\n\t\t\t\t\t\t\tonChange={e => dispatch({ type: \"description\", payload: e.target.value })}\n\t\t\t\t\t\t\tplaceholder=\"descripcion\"\n\t\t\t\t\t\t\ttype=\"text\" />\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<select value={state.line} onChange={onChangeLine}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.lines.length === 0 &&\n\t\t\t\t\t\t\t\t<option defaultValue=\"default\">\n\t\t\t\t\t\t\t\t\tcargando..\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.lines.length > 0 &&\n\t\t\t\t\t\t\t\tstate.lines.map((item, index) => <option value={item} key={index}>{item}</option>)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<select value={state.subline} onChange={e => dispatch({ type: \"subline\", payload: e.target.value })}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.sublines.length === 0 &&\n\t\t\t\t\t\t\t\t<option defaultValue=\"default\">\n\t\t\t\t\t\t\t\t\tcargando..\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.sublines.length > 0 &&\n\t\t\t\t\t\t\t\tstate.sublines.map((item, index) => {\n\t\t\t\t\t\t\t\t\tif (state.line === item.descr) {\n\t\t\t\t\t\t\t\t\t\treturn <option value={item.idlinea} key={index}>{item.idlinea}</option>\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\treturn null\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<select value={state.stateSelected} onChange={e => dispatch({ type: \"stateSelected\", payload: e.target.value })}>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.sublines.length === 0 &&\n\t\t\t\t\t\t\t\t<option defaultValue=\"default\">\n\t\t\t\t\t\t\t\t\tcargando..\n\t\t\t\t\t\t\t\t</option>\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstate.states.length > 0 &&\n\t\t\t\t\t\t\t\tstate.states.map((item, index) => <option value={item} key={index}>{item}</option>)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t</select>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div className=\"col\">\n\t\t\t\t\t\t<button onClick={submit}>Enviar</button>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</fieldset>\n\t\t</div>\n\t)\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}